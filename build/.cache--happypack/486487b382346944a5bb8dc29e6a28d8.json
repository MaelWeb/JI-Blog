{"remainingRequest":"/Users/mael.liang/Workspace/node-koa-test/node_modules/babel-loader/lib/index.js?{\"presets\":[]}!/Users/mael.liang/Workspace/node-koa-test/web/components/Toucher/index.js","dependencies":[{"path":"/Users/mael.liang/Workspace/node-koa-test/web/components/Toucher/index.js","mtime":1512366771000},{"path":"/Users/mael.liang/Workspace/node-koa-test/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/mael.liang/Workspace/node-koa-test/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * react toucher (移动端手势库)\n *\n * 支持事件：singleTap(轻击), doubleTap(双击), longTap(长按), swipeUp(上划), swipeRight(右划), swipeDown(下划), swipeleft(左划)\n *\n * Use: <Toucher onSwipeLeft={ this.swipeLeft.bind(this) } ></Toucher>\n *\n * create by mael\n */\nvar Toucher = function (_React$Component) {\n    (0, _inherits3.default)(Toucher, _React$Component);\n\n    function Toucher(props) {\n        (0, _classCallCheck3.default)(this, Toucher);\n\n        //轻击开始时间\n        var _this2 = (0, _possibleConstructorReturn3.default)(this, (Toucher.__proto__ || (0, _getPrototypeOf2.default)(Toucher)).call(this, props));\n\n        _this2.touchStartTime = 0;\n\n        //记录上一次点击时间\n        _this2.lastTouchTime = 0;\n\n        //记录初始轻击的位置\n        _this2.x1, _this2.y1, _this2.x2, _this2.y2;\n\n        //轻击事件的延时器\n        _this2.touchDelay;\n\n        //测试长按事件的延时器\n        _this2.longTap;\n\n        //记录当前事件是否已为等待结束的状态\n        _this2.isActive = false;\n        //记录有坐标信息的事件\n        _this2.eventMark = null;\n\n        // 事件堆\n        _this2._events = {};\n        return _this2;\n    }\n\n    (0, _createClass3.default)(Toucher, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            this.DOM = (0, _reactDom.findDOMNode)(this);\n            this._events = this.props;\n            this.eventListener();\n        }\n    }, {\n        key: 'eventListener',\n        value: function eventListener() {\n            /**\n             * 对开始手势的监听\n             */\n            this.DOM.addEventListener('touchstart', this.touchStart.bind(this));\n            this.DOM.addEventListener('MSPointerDown', this.touchStart.bind(this));\n            this.DOM.addEventListener('pointerdown', this.touchStart.bind(this));\n\n            /**\n             * 对手势结束的监听（轻击）\n             */\n            this.DOM.addEventListener('touchend', this.touchend.bind(this));\n            this.DOM.addEventListener('MSPointerUp', this.touchend.bind(this));\n            this.DOM.addEventListener('pointerup', this.touchend.bind(this));\n\n            /**\n             * 对移动手势的监听\n             */\n            this.DOM.addEventListener('touchmove', this.touchmove.bind(this));\n            this.DOM.addEventListener('MSPointerMove', this.touchmove.bind(this));\n            this.DOM.addEventListener('pointermove', this.touchmove.bind(this));\n\n            /**\n             * 对移动结束的监听\n             */\n            this.DOM.addEventListener('touchcancel', this.actionOver.bind(this));\n            this.DOM.addEventListener('MSPointerCancel', this.actionOver.bind(this));\n            this.DOM.addEventListener('pointercancel', this.actionOver.bind(this));\n        }\n    }, {\n        key: 'actionOver',\n        value: function actionOver(e) {\n            this.isActive = false;\n            clearTimeout(this.longTap);\n            clearTimeout(this.touchDelay);\n        }\n\n        /**\n         * 执行绑定的回调函数，并创建一个事件对象\n         * @param[string]事件名\n         * @param[function]被执行掉的函数\n         * @param[object]指向的dom\n         * @param[object]原生event对象\n         */\n\n    }, {\n        key: 'event_callback',\n        value: function event_callback(name, e) {\n            //优先使用自定义的touches（目前是为了解决touchEnd无touches的问题）\n            var touches = e.plugTouches || e.touches,\n                touch = touches.length ? touches[0] : {},\n                newE = {\n                type: name,\n                target: this.DOM,\n                pageX: touch.pageX,\n                pageY: touch.pageY,\n                clientX: touch.clientX || 0,\n                clientY: touch.clientY || 0\n            };\n            //为swipe事件增加交互初始位置及移动距离\n            if (name.match(/^onSwipe/) && e.plugStartPosition) {\n                newE.startX = e.plugStartPosition.pageX;\n                newE.startY = e.plugStartPosition.pageY;\n                newE.moveX = newE.pageX - newE.startX;\n                newE.moveY = newE.pageY - newE.startY;\n            }\n            //执行绑定事件的回调，并记录返回值\n            // var call_result = fn.call(dom, newE);\n            var call_result = this._events[name](newE);\n            //若返回false，阻止浏览器默认事件\n            if (call_result == false) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }\n\n        /**\n         * @method 事件触发器\n         * @description 根据事件最原始被触发的target，逐级向上追溯事件绑定\n         *\n         * @param string 事件名\n         * @param object 原生事件对象\n         */\n\n    }, {\n        key: 'EMIT',\n        value: function EMIT(eventName, e) {\n            this._events = this._events || this.props;\n            //事件堆无该事件，结束触发\n            if (!this._events[eventName]) {\n                return;\n            }\n\n            //从事件源：target开始向上冒泡\n            var target = e.target;\n            while (1) {\n                //若已经冒泡至顶，检测顶级绑定，结束冒泡\n                if (target == this.DOM || !target) {\n                    var callback = this._events[eventName];\n                    this.event_callback(eventName, e);\n                    return;\n                }\n\n                //向上冒泡\n                target = target.parentNode;\n            }\n        }\n    }, {\n        key: 'isSingleTap',\n        value: function isSingleTap() {\n            this.actionOver();\n            this.EMIT('onSingleTap', this.eventMark);\n        }\n    }, {\n        key: 'touchStart',\n        value: function touchStart(e) {\n            if (!e.touches) return;\n            //缓存事件\n            this.eventMark = e;\n            this.x1 = e.touches[0].pageX;\n            this.y1 = e.touches[0].pageY;\n            this.x2 = 0;\n            this.y2 = 0;\n            this.isActive = true;\n            this.touchStartTime = new Date();\n            this.EMIT('onSwipeStart', e);\n            //检测是否为长按\n            clearTimeout(this.longTap);\n\n            var _this = this;\n            this.longTap = setTimeout(function () {\n                _this.actionOver(e);\n                //断定此次事件为长按事件\n                _this.EMIT('onLongTap', e);\n            }, 500);\n        }\n    }, {\n        key: 'touchend',\n        value: function touchend(e) {\n            //touchend中，拿不到坐标位置信息，故使用全局保存下数据\n            e.plugStartPosition = this.eventMark.plugStartPosition;\n            e.plugTouches = this.eventMark.touches;\n            this.EMIT('onSwipeEnd', e);\n            if (!this.isActive) {\n                return;\n            }\n            var now = new Date();\n            //若未监听doubleTap，直接响应\n            if (!this._events.doubleTap || this._events.doubleTap.length == 0) {\n                this.isSingleTap();\n            } else if (now - this.lastTouchTime > 200) {\n                //延迟响应\n                this.touchDelay = setTimeout(this.isSingleTap, 190);\n            } else {\n                clearTimeout(this.touchDelay);\n                this.actionOver(e);\n                //断定此次事件为连续两次轻击事件\n                this.EMIT('onDoubleTap', eventMark);\n            }\n            this.lastTouchTime = now;\n        }\n    }, {\n        key: 'touchmove',\n        value: function touchmove(e) {\n            if (!e.touches) return;\n            //缓存事件\n            this.eventMark = e;\n            //在原生事件基础上记录初始位置（为swipe事件增加参数传递）\n            e.plugStartPosition = {\n                pageX: this.x1,\n                pageY: this.y1\n            };\n\n            //断定此次事件为移动事件\n            this.EMIT('onSwipe', e);\n            if (!this.isActive) {\n                return;\n            }\n            this.x2 = e.touches[0].pageX;\n            this.y2 = e.touches[0].pageY;\n            if (Math.abs(this.x1 - this.x2) > 2 || Math.abs(this.y1 - this.y2) > 2) {\n                //断定此次事件为移动手势\n                var direction = this.swipeDirection(this.x1, this.x2, this.y1, this.y2);\n                this.EMIT('onSwipe' + direction, e);\n            } else {\n                //断定此次事件为轻击事件\n                this.isSingleTap();\n            }\n            this.actionOver(e);\n        }\n    }, {\n        key: 'swipeDirection',\n        value: function swipeDirection(x1, x2, y1, y2) {\n            return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _props = this.props,\n                children = _props.children,\n                className = _props.className,\n                style = _props.style,\n                others = (0, _objectWithoutProperties3.default)(_props, ['children', 'className', 'style']);\n\n            return _react2.default.createElement(\n                'div',\n                { className: className, style: style },\n                children\n            );\n        }\n    }]);\n    return Toucher;\n}(_react2.default.Component);\n\nexports.default = Toucher;",null]}