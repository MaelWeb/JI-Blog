{"remainingRequest":"/Users/mael.liang/Workspace/node-koa-test/node_modules/babel-loader/lib/index.js?{\"presets\":[]}!/Users/mael.liang/Workspace/node-koa-test/web/components/ImageGallery/index.js","dependencies":[{"path":"/Users/mael.liang/Workspace/node-koa-test/web/components/ImageGallery/index.js","mtime":1512366771000},{"path":"/Users/mael.liang/Workspace/node-koa-test/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/mael.liang/Workspace/node-koa-test/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _Toucher = require('../Toucher');\n\nvar _Toucher2 = _interopRequireDefault(_Toucher);\n\nvar _Icon = require('../Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ImageGallery = function (_Component) {\n    (0, _inherits3.default)(ImageGallery, _Component);\n\n    function ImageGallery(props) {\n        (0, _classCallCheck3.default)(this, ImageGallery);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (ImageGallery.__proto__ || (0, _getPrototypeOf2.default)(ImageGallery)).call(this, props));\n\n        _this.preventDefault = function (e) {\n            e.preventDefault();\n        };\n\n        _this.close = function () {\n            _this.setState({\n                isShow: false\n            });\n        };\n\n        _this._onSliding = function () {\n            var isTransitioning = _this.state.isTransitioning;\n\n            window.setTimeout(function () {\n                if (isTransitioning) {\n                    _this.setState({ isTransitioning: !isTransitioning });\n                }\n            }, _this.props.slideDuration);\n        };\n\n        _this.slideToIndex = function (index, event) {\n            var _this$state = _this.state,\n                currentIndex = _this$state.currentIndex,\n                isTransitioning = _this$state.isTransitioning;\n\n\n            if (!isTransitioning) {\n\n                var slideCount = _this.props.images.length - 1;\n                var nextIndex = index;\n\n                if (index < 0) {\n                    nextIndex = slideCount;\n                } else if (index > slideCount) {\n                    nextIndex = 0;\n                }\n\n                _this.setState({\n                    previousIndex: currentIndex,\n                    currentIndex: nextIndex,\n                    isTransitioning: nextIndex !== currentIndex,\n                    offsetPercentage: 0,\n                    style: {\n                        transition: 'all ' + _this.props.slideDuration + 'ms ease-out'\n                    }\n                }, _this._onSliding);\n            }\n        };\n\n        _this.slideLeft = function (event) {\n            _this.slideToIndex(_this.state.currentIndex - 1, event);\n        };\n\n        _this.slideRight = function (event) {\n            _this.slideToIndex(_this.state.currentIndex + 1, event);\n        };\n\n        _this._getSlideStyle = function (index) {\n            var _this$state2 = _this.state,\n                currentIndex = _this$state2.currentIndex,\n                offsetPercentage = _this$state2.offsetPercentage;\n            var images = _this.props.images;\n\n            var baseTranslateX = -100 * currentIndex;\n            var totalSlides = images.length - 1;\n\n            // calculates where the other slides belong based on currentIndex\n            var translateX = baseTranslateX + index * 100 + offsetPercentage;\n\n            if (images.length > 2) {\n                if (currentIndex === 0 && index === totalSlides) {\n                    // make the last slide the slide before the first\n                    translateX = -100 + offsetPercentage;\n                } else if (currentIndex === totalSlides && index === 0) {\n                    // make the first slide the slide after the last\n                    translateX = 100 + offsetPercentage;\n                }\n            }\n\n            // Special case when there are only 2 images with infinite on\n            if (images.length === 2) {\n                translateX = _this._getTranslateXForTwoSlide(index);\n            }\n\n            var translate = 'translate(' + translateX + '%, 0)';\n\n            return {\n                WebkitTransform: translate,\n                MozTransform: translate,\n                msTransform: translate,\n                OTransform: translate,\n                transform: translate\n            };\n        };\n\n        _this.state = {\n            currentIndex: props.startIndex,\n            offsetPercentage: 0,\n            isShow: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(ImageGallery, [{\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n            if (nextProps.startIndex >= nextProps.images.length) {\n                this.setState({\n                    currentIndex: 0,\n                    isShow: nextProps.isShow\n                });\n            } else {\n                this.setState({\n                    currentIndex: nextProps.startIndex,\n                    isShow: nextProps.isShow\n                });\n            }\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            if (_reactDom2.default.findDOMNode(this)) {\n                this.dom = _reactDom2.default.findDOMNode(this);\n                this.dom.addEventListener('touchmove', this.preventDefault);\n            }\n        }\n    }, {\n        key: '_shouldPushSlideOnInfiniteMode',\n        value: function _shouldPushSlideOnInfiniteMode(index) {\n            /*\n              Push(show) slide if slide is the current slide, and the next slide\n              OR\n              The slide is going more than 1 slide left, or right, but not going from\n              first to last and not going from last to first\n              There is an edge case where if you go to the first or last slide, when they're\n              not left, or right of each other they will try to catch up in the background\n              so unless were going from first to last or vice versa we don't want the first\n              or last slide to show up during our transition\n            */\n            return !this._slideIsTransitioning(index) || this._ignoreIsTransitioning() && !this._isFirstOrLastSlide(index);\n        }\n    }, {\n        key: '_slideIsTransitioning',\n        value: function _slideIsTransitioning(index) {\n            /*\n            returns true if the gallery is transitioning and the index is not the\n            previous or currentIndex\n            */\n            var _state = this.state,\n                isTransitioning = _state.isTransitioning,\n                previousIndex = _state.previousIndex,\n                currentIndex = _state.currentIndex;\n\n            var indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\n            return isTransitioning && indexIsNotPreviousOrNextSlide;\n        }\n    }, {\n        key: '_isFirstOrLastSlide',\n        value: function _isFirstOrLastSlide(index) {\n            var totalSlides = this.props.images.length - 1;\n            var isLastSlide = index === totalSlides;\n            var isFirstSlide = index === 0;\n            return isLastSlide || isFirstSlide;\n        }\n    }, {\n        key: '_ignoreIsTransitioning',\n        value: function _ignoreIsTransitioning() {\n            /*\n              Ignore isTransitioning because were not going to sibling slides\n              e.g. center to left or center to right\n            */\n            var _state2 = this.state,\n                previousIndex = _state2.previousIndex,\n                currentIndex = _state2.currentIndex;\n\n            var totalSlides = this.props.images.length - 1;\n            // we want to show the in between slides transition\n            var slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\n            var notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\n            var notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\n\n            return slidingMoreThanOneSlideLeftOrRight && notGoingFromFirstToLast && notGoingFromLastToFirst;\n        }\n    }, {\n        key: 'getSlides',\n        value: function getSlides() {\n            var _this2 = this;\n\n            var slides = [];\n            var images = this.props.images;\n            var currentIndex = this.state.currentIndex;\n\n\n            images.length && images.map(function (img, index) {\n                if (_this2._shouldPushSlideOnInfiniteMode(index)) {\n                    var slideStyle = _this2._getSlideStyle(index);\n                    slides.push(_react2.default.createElement(\n                        'div',\n                        { className: 'image-gallery-slide', style: (0, _assign2.default)(slideStyle, _this2.state.style), key: index },\n                        _react2.default.createElement('img', { src: img.src })\n                    ));\n                }\n            });\n\n            return slides;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _state3 = this.state,\n                isShow = _state3.isShow,\n                currentIndex = _state3.currentIndex;\n            var images = this.props.images;\n\n            return _react2.default.createElement(\n                'div',\n                { className: 'mael-image-gallery', hidden: !isShow },\n                _react2.default.createElement(_Icon2.default, { type: 'close', onClick: this.close }),\n                _react2.default.createElement(\n                    _Toucher2.default,\n                    { className: 'image-gallery-swipe', onSwipeRight: this.slideLeft, onSwipeLeft: this.slideRight },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'image-gallery-arrow arrow-left', onClick: this.slideLeft },\n                        _react2.default.createElement(_Icon2.default, { type: 'bold-arrow-left' })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'image-gallery-slides' },\n                        this.getSlides()\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'image-gallery-arrow arrow-right', onClick: this.slideRight },\n                        _react2.default.createElement(_Icon2.default, { type: 'bold-arrow-right' })\n                    )\n                ),\n                _react2.default.createElement(\n                    'p',\n                    { className: 'image-index tc' },\n                    currentIndex + 1,\n                    '/',\n                    images.length\n                )\n            );\n        }\n    }]);\n    return ImageGallery;\n}(_react.Component);\n\nImageGallery.propTypes = {\n    startIndex: _propTypes2.default.number,\n    images: _propTypes2.default.array,\n    slideDuration: _propTypes2.default.number\n};\nImageGallery.defaultProps = {\n    startIndex: 0,\n    images: [],\n    slideDuration: 450\n};\nexports.default = ImageGallery;",null]}